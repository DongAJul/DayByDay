{"ast":null,"code":"var _jsxFileName = \"/Users/yeonjaelee/Desktop/Projects/My Projects.nosync/web/React/pdf_test/src/PDFExtract.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { pdfjs } from 'react-pdf';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\npdfjs.GlobalWorkerOptions.workerSrc = `//cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjs.version}/pdf.worker.js`;\nfunction PDFExtract({\n  file\n}) {\n  _s();\n  const [allText, setAllText] = useState('');\n  let test;\n  useEffect(() => {\n    async function extractTextFromFile() {\n      const pdf = await pdfjs.getDocument({\n        url: URL.createObjectURL(file)\n      }).promise;\n      test = URL.createObjectURL(file);\n      const numPages = pdf.numPages;\n      let newText = '';\n      for (let pageNumber = 1; pageNumber <= numPages; pageNumber++) {\n        const page = await pdf.getPage(pageNumber);\n        const content = await page.getTextContent();\n        const strings = content.items.map(item => item.str);\n        newText += strings.join(' ') + ' ';\n      }\n      setAllText(newText);\n    }\n    if (file) {\n      extractTextFromFile();\n    }\n  }, [file]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Extract PDF Text\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n      children: allText\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 13\n    }, this), console.log(test)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 9\n  }, this);\n}\n_s(PDFExtract, \"mx1Dwwou+Xsy1h5lCQWAUIAnxx8=\");\n_c = PDFExtract;\nexport default PDFExtract;\nvar _c;\n$RefreshReg$(_c, \"PDFExtract\");","map":{"version":3,"names":["React","useEffect","useState","pdfjs","jsxDEV","_jsxDEV","GlobalWorkerOptions","workerSrc","version","PDFExtract","file","_s","allText","setAllText","test","extractTextFromFile","pdf","getDocument","url","URL","createObjectURL","promise","numPages","newText","pageNumber","page","getPage","content","getTextContent","strings","items","map","item","str","join","children","fileName","_jsxFileName","lineNumber","columnNumber","console","log","_c","$RefreshReg$"],"sources":["/Users/yeonjaelee/Desktop/Projects/My Projects.nosync/web/React/pdf_test/src/PDFExtract.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { pdfjs } from 'react-pdf';\n\npdfjs.GlobalWorkerOptions.workerSrc = `//cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjs.version}/pdf.worker.js`;\n\nfunction PDFExtract({ file }) {\n    const [allText, setAllText] = useState('');\n    let test;\n\n    useEffect(() => {\n        async function extractTextFromFile() {\n            const pdf = await pdfjs.getDocument({ url: URL.createObjectURL(file) }).promise;\n            test = URL.createObjectURL(file);\n            const numPages = pdf.numPages;\n            let newText = '';\n\n            for (let pageNumber = 1; pageNumber <= numPages; pageNumber++) {\n                const page = await pdf.getPage(pageNumber);\n                const content = await page.getTextContent();\n                const strings = content.items.map((item) => item.str);\n                newText += strings.join(' ') + ' ';\n            }\n\n            setAllText(newText);\n        }\n\n        if (file) {\n            extractTextFromFile();\n        }\n    }, [file]);\n\n    return (\n        <div>\n            <p>Extract PDF Text</p>\n            <pre>{allText}</pre>\n            { console.log(test) }\n        </div>\n    );\n}\n\nexport default PDFExtract;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,KAAK,QAAQ,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElCF,KAAK,CAACG,mBAAmB,CAACC,SAAS,GAAI,2CAA0CJ,KAAK,CAACK,OAAQ,gBAAe;AAE9G,SAASC,UAAUA,CAAC;EAAEC;AAAK,CAAC,EAAE;EAAAC,EAAA;EAC1B,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EAC1C,IAAIY,IAAI;EAERb,SAAS,CAAC,MAAM;IACZ,eAAec,mBAAmBA,CAAA,EAAG;MACjC,MAAMC,GAAG,GAAG,MAAMb,KAAK,CAACc,WAAW,CAAC;QAAEC,GAAG,EAAEC,GAAG,CAACC,eAAe,CAACV,IAAI;MAAE,CAAC,CAAC,CAACW,OAAO;MAC/EP,IAAI,GAAGK,GAAG,CAACC,eAAe,CAACV,IAAI,CAAC;MAChC,MAAMY,QAAQ,GAAGN,GAAG,CAACM,QAAQ;MAC7B,IAAIC,OAAO,GAAG,EAAE;MAEhB,KAAK,IAAIC,UAAU,GAAG,CAAC,EAAEA,UAAU,IAAIF,QAAQ,EAAEE,UAAU,EAAE,EAAE;QAC3D,MAAMC,IAAI,GAAG,MAAMT,GAAG,CAACU,OAAO,CAACF,UAAU,CAAC;QAC1C,MAAMG,OAAO,GAAG,MAAMF,IAAI,CAACG,cAAc,CAAC,CAAC;QAC3C,MAAMC,OAAO,GAAGF,OAAO,CAACG,KAAK,CAACC,GAAG,CAAEC,IAAI,IAAKA,IAAI,CAACC,GAAG,CAAC;QACrDV,OAAO,IAAIM,OAAO,CAACK,IAAI,CAAC,GAAG,CAAC,GAAG,GAAG;MACtC;MAEArB,UAAU,CAACU,OAAO,CAAC;IACvB;IAEA,IAAIb,IAAI,EAAE;MACNK,mBAAmB,CAAC,CAAC;IACzB;EACJ,CAAC,EAAE,CAACL,IAAI,CAAC,CAAC;EAEV,oBACIL,OAAA;IAAA8B,QAAA,gBACI9B,OAAA;MAAA8B,QAAA,EAAG;IAAgB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,eACvBlC,OAAA;MAAA8B,QAAA,EAAMvB;IAAO;MAAAwB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,EAClBC,OAAO,CAACC,GAAG,CAAC3B,IAAI,CAAC;EAAA;IAAAsB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAClB,CAAC;AAEd;AAAC5B,EAAA,CAjCQF,UAAU;AAAAiC,EAAA,GAAVjC,UAAU;AAmCnB,eAAeA,UAAU;AAAC,IAAAiC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}