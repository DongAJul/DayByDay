{"ast":null,"code":"var _jsxFileName = \"/Users/yeonjaelee/Desktop/Projects/My Projects.nosync/web/React/pdf_test/src/App.js\";\nimport './App.css';\nimport React, { useState } from 'react';\nimport PDFViewer from './PDFViewer';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  const extractTextFromPDF = async pdfUrl => {\n    const pdf = await pdfjs.getDocument(pdfUrl).promise;\n    const numPages = pdf.numPages;\n    let allText = '';\n    for (let pageNumber = 1; pageNumber <= numPages; pageNumber++) {\n      const page = await pdf.getPage(pageNumber);\n      const content = await page.getTextContent();\n      const strings = content.items.map(item => item.str);\n      allText += strings.join(' ');\n    }\n    return allText;\n  };\n  return /*#__PURE__*/_jsxDEV(PDFViewer, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 5\n  }, this), extractTextFromPDF('/path/to/pdf').then(text => {\n    console.log('Extracted text:', text);\n  });\n}\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","PDFViewer","jsxDEV","_jsxDEV","App","extractTextFromPDF","pdfUrl","pdf","pdfjs","getDocument","promise","numPages","allText","pageNumber","page","getPage","content","getTextContent","strings","items","map","item","str","join","fileName","_jsxFileName","lineNumber","columnNumber","then","text","console","log","_c","$RefreshReg$"],"sources":["/Users/yeonjaelee/Desktop/Projects/My Projects.nosync/web/React/pdf_test/src/App.js"],"sourcesContent":["import './App.css';\nimport React, { useState } from 'react';\nimport PDFViewer from './PDFViewer';\n\nfunction App() {\n\n  const extractTextFromPDF = async (pdfUrl) => {\n    const pdf = await pdfjs.getDocument(pdfUrl).promise;\n    const numPages = pdf.numPages;\n    let allText = '';\n\n    for (let pageNumber = 1; pageNumber <= numPages; pageNumber++) {\n      const page = await pdf.getPage(pageNumber);\n      const content = await page.getTextContent();\n      const strings = content.items.map(item => item.str);\n      allText += strings.join(' ');\n    }\n\n    return allText;\n  };\n\n  return (\n    <PDFViewer></PDFViewer>,\n    extractTextFromPDF('/path/to/pdf').then(text => {\n      console.log('Extracted text:', text);\n    })\n  );\n}\n\nexport default App;\n"],"mappings":";AAAA,OAAO,WAAW;AAClB,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,SAAS,MAAM,aAAa;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEpC,SAASC,GAAGA,CAAA,EAAG;EAEb,MAAMC,kBAAkB,GAAG,MAAOC,MAAM,IAAK;IAC3C,MAAMC,GAAG,GAAG,MAAMC,KAAK,CAACC,WAAW,CAACH,MAAM,CAAC,CAACI,OAAO;IACnD,MAAMC,QAAQ,GAAGJ,GAAG,CAACI,QAAQ;IAC7B,IAAIC,OAAO,GAAG,EAAE;IAEhB,KAAK,IAAIC,UAAU,GAAG,CAAC,EAAEA,UAAU,IAAIF,QAAQ,EAAEE,UAAU,EAAE,EAAE;MAC7D,MAAMC,IAAI,GAAG,MAAMP,GAAG,CAACQ,OAAO,CAACF,UAAU,CAAC;MAC1C,MAAMG,OAAO,GAAG,MAAMF,IAAI,CAACG,cAAc,CAAC,CAAC;MAC3C,MAAMC,OAAO,GAAGF,OAAO,CAACG,KAAK,CAACC,GAAG,CAACC,IAAI,IAAIA,IAAI,CAACC,GAAG,CAAC;MACnDV,OAAO,IAAIM,OAAO,CAACK,IAAI,CAAC,GAAG,CAAC;IAC9B;IAEA,OAAOX,OAAO;EAChB,CAAC;EAED,OACE,aAAAT,OAAA,CAACF,SAAS;IAAAuB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAY,CAAC,EACvBtB,kBAAkB,CAAC,cAAc,CAAC,CAACuB,IAAI,CAACC,IAAI,IAAI;IAC9CC,OAAO,CAACC,GAAG,CAAC,iBAAiB,EAAEF,IAAI,CAAC;EACtC,CAAC,CAAC;AAEN;AAACG,EAAA,GAvBQ5B,GAAG;AAyBZ,eAAeA,GAAG;AAAC,IAAA4B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}